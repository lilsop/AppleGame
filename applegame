##########################################   a121_catch_a_turtle.py   #######################################################
#-----import statements-----
import turtle as trtl
spot = trtl.Turtle()
score_writer = trtl.Turtle()
timer = trtl.Turtle()
counter =  trtl.Turtle()
import random as rand
import leaderboard as lb
#-----game configuration----

  # apple variables
spot_color = "pink"
spot_size = 2
spot_shape = "turtle"
score = 0
font_setup = ("Arial", 20, "normal")

  # timer variables
counter_interval = 1000
timer_up = False
time = 5

  # leaderboard variables
leaderboard_file_name = "myleaderboard.txt"
leader_names_list = []
leader_scores_list = []
player_name = input("What is your player name?")

#-----initialize turtle-----
spot.shape(spot_shape)
spot.color(spot_color)
spot.shapesize(spot_size)
spot.fillcolor(spot_color)

score_writer.penup()
score_writer.goto(-300, 300)
score_writer.pendown()

timer.penup()
timer.goto(-300, 250)
timer.pendown()

counter.penup()
counter.goto(-300, 200)
counter.pendown()

#-----game functions--------
def spot_clicked(x, y):
    global time
    if timer_up == False:
      change_position()
      update_score()
    else:
      spot.hideturtle()  

def change_position():
    newx = rand.randint(0,100)
    newy = rand.randint(0, 100)
    spot.penup()
    spot.goto(newx, newy)
    spot.pendown()

def update_score():
    global score
    score += 1
    score_writer.clear()
    score_writer.write(score, font=font_setup)

def countdown():
  global time, timer_up
  counter.clear()
  if time <= 0:
    counter.write("Time's Up", font=font_setup)
    timer_up = True
    manage_leaderboard()
  else:
    counter.write("Timer: " + str(time), font=font_setup)
    time -= 1
    counter.getscreen().ontimer(countdown, counter_interval)

# manages the leaderboard for top 5 scorers
def manage_leaderboard():
  print("managing leaderboard")
  global leader_scores_list
  global leader_names_list
  global score
  global spot
  global time

  # load all the leaderboard records into the lists
  lb.load_leaderboard(leaderboard_file_name, leader_names_list, leader_scores_list)

  # TODO
  if (len(leader_scores_list) < 5 or score > leader_scores_list[4]):
    lb.update_leaderboard(leaderboard_file_name, leader_names_list, leader_scores_list, player_name, score)
    lb.draw_leaderboard(leader_names_list, leader_scores_list, True, spot, score)
  if time <= 0:
    counter.write("Time's Up", font=font_setup)
    timer_up = True
    manage_leaderboard()
    time = 1
  else:
    lb.draw_leaderboard(leader_names_list, leader_scores_list, False, spot, score)


#-----events----------------
spot.onclick(spot_clicked)
wn = trtl.Screen()
wn.ontimer(countdown, counter_interval) 
wn.mainloop()


##############################################################   LEADERBOARD   ###############################################

###########################################################################
#   leaderboard.py
#   Example solution:
#      Solution for completing TODO 10
###########################################################################

# set the levels of scoring
bronze_score = 15
silver_score = 20
gold_score = 25

# load leaderboard from file
def load_leaderboard(file_name, leader_names, leader_scores):
  
  leaderboard_file = open(file_name, "r")  # need to create the file ahead of time in same folder
  
  # use a for loop to iterate through the content of the file, one line at a time
  # note that each line in the file has the format "leader_name,leader_score" for example "Pat,50"
  for line in leaderboard_file:
    leader_name = ""
    leader_score = ""    
    index = 0

    # TODO 1: use a while loop to read the leader name from the line (format is "leader_name,leader_score")
    while (line[index] != ","):
      leader_name = leader_name + line[index]
      index = index + 1
    # the loop ends when index is pointing at the comma character
    print("leader name is:", leader_name)
    
    # TODO 2: add the leader name to the list
    leader_names.append(leader_name)
    
    # TODO 3: read the player score using a similar loop
    index = index + 1
    while (line[index] != "\n"):
      leader_score = leader_score + line[index]
      index = index + 1
    print("leader score is:", leader_score)
    
    # TODO 4: add the player score to the list
    leader_scores.append(int(leader_score))

  leaderboard_file.close()
  

# update leaderboard by inserting the current player and score to the list at the correct position
def update_leaderboard(file_name, leader_names, leader_scores, player_name, player_score):

  leader_index = 0
  # TODO 5: loop through all the scores in the existing leaderboard list
  while (leader_index < len(leader_scores)):
    # TODO 6: check if this is the position to insert new score at
    if (player_score >= leader_scores[leader_index]):
      break
    else:
      leader_index = leader_index + 1
  
  # TODO 7: insert the new player and score at the appropriate position
  leader_scores.insert(leader_index, player_score)
  leader_names.insert(leader_index, player_name)

  print("leader_names are:", leader_names)
  print("leader_scores are:", leader_scores)
  
  # TODO 8: keep both lists at 5 elements only (top 5 players)
  if (len(leader_names) == 6):
    leader_names.pop(5)
  
  if (len(leader_scores) == 6):
    leader_scores.pop(5)
  
  # store the latest leaderboard back in the file
  leaderboard_file = open(file_name, "w")  # this mode opens the file and erases its contents for a fresh start
  leader_index = 0
  # TODO 9: loop through all the leaderboard elements and write them to the the file
  while (leader_index < len(leader_names)):
    leaderboard_file.write(leader_names[leader_index] + "," + str(leader_scores[leader_index]) + "\n")
    leader_index = leader_index + 1

  leaderboard_file.close()
  

# draw leaderboard and display a message to player
def draw_leaderboard(leader_names, leader_scores, high_scorer, turtle_object, player_score):
  
  # clear the screen and move turtle object to (-200, 100) to start drawing the leaderboard
  font_setup = ("Arial", 20, "normal")
  turtle_object.clear()
  turtle_object.penup()
  turtle_object.goto(-160,100)
  turtle_object.hideturtle()
  turtle_object.down()
  leader_index = 0

  # loop through the lists and use the same index to display the corresponding name and score, separated by a tab space '\t'
  while leader_index < len(leader_names):
    turtle_object.write(str(leader_index + 1) + "\t" + leader_names[leader_index] + "\t" + str(leader_scores[leader_index]), font=font_setup)
    turtle_object.penup()
    turtle_object.goto(-160,int(turtle_object.ycor())-50)
    turtle_object.down()
    leader_index = leader_index + 1

  # Display message about player making/not making leaderboard based on high_scorer
  if (high_scorer):
    turtle_object.write("Congratulations!\nYou made the leaderboard!", font=font_setup)
  else:
    turtle_object.write("Sorry!\nYou didn't make the leaderboard.\nMaybe next time!", font=font_setup)

  # move turtle to a new line
  turtle_object.penup()
  turtle_object.goto(-160,int(turtle_object.ycor())-50)
  turtle_object.pendown()
  
  # TODO 10: Display a gold/silver/bronze message if player earned a gold/silver/or bronze medal; display nothing if no medal
  if (player_score >= bronze_score and player_score < silver_score):
    turtle_object.write("You earned a bronze medal!", font=font_setup)
  elif (player_score >= silver_score and player_score < gold_score):
    turtle_object.write("You earned a silver medal!", font=font_setup)
  elif (player_score >= gold_score):
    turtle_object.write("You earned a gold medal!", font=font_setup)
    
    
#######################################   THE TEXT LEADERBOARD FILE   ################################################

player2,11
player1,10
player3,9
sop,140
